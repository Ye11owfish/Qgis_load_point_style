# -*- coding: utf-8 -*-
"""
/***************************************************************************
 load_point
                                 A QGIS plugin
 load_point
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Fish
        email                : h38604@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog
from qgis.PyQt.QtWidgets import QAction,QTableWidgetItem 
from qgis.core import QgsProject
from qgis.core import QgsDataSourceUri, QgsApplication
import sqlite3

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .load_point_dialog import load_pointDialog
import os.path


class load_point:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'load_point_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&load_point')
        

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('load_point', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/load_point/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'load_point'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&load_point'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_input_file(self):
        filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select intput file ","", '*.sqlite')
        self.dlg.lineEdit.setText(filename)
        self.db_path=self.dlg.lineEdit.text()
        
    
    def import_database(self):
        from Lily.ctao2.ctao2_database_alias import manidb
        self.layers = sorted(manidb(self.db_path).tables().index.values)
        self.dlg.comboBox.clear()
        for layer in self.layers:
            self.dlg.comboBox.addItem(layer)        

    def show_layer(self):
        self.selectedLayer = self.dlg.comboBox.currentText()       
        uri = QgsDataSourceUri()
        uri.setDatabase(self.db_path)        
        schema = ''
        table_name = self.selectedLayer
        geom_column = 'geom'
        uri.setDataSource(schema, table_name, geom_column)
        self.layer = self.iface.addVectorLayer(uri.uri(), table_name,'spatialite')
        self.iface.zoomToActiveLayer()
        self.iface.actionSelect().trigger()

    def show_select_features(self):        
        selection = self.layer.selectedFeatures()
        self.featlist = []
        for feat in selection:
            self.featlist.append(feat.attributes())
        
        self.dlg.tableWidget.setRowCount(len(self.featlist))       #橫列數
        self.dlg.tableWidget.setColumnCount(len(self.featlist[0])) #直行數

        self.field_name = self.layer.fields().names()   #list
        self.dlg.tableWidget.setHorizontalHeaderLabels(self.field_name)

        self.rev_flist=list(map(list,(zip(*self.featlist))))  #行列互換
               
        for i in range(len(self.rev_flist)):           #列
            for j in range(len(self.rev_flist[0])):    #行
                
                self.a=str(self.rev_flist[i][j])
                item=self.a
                self.new_item=QTableWidgetItem(item)
                self.dlg.tableWidget.setItem(j,i,self.new_item)
        
    def select_input_style(self):
        filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select intput style ","", '*.qml')
        self.dlg.lineEdit_2.setText(filename)
        self.style_path=self.dlg.lineEdit_2.text()

    def load_style(self):
        self.layer.loadNamedStyle(self.style_path)
        self.layer.triggerRepaint()
        self.layer.saveStyleToDatabase(name=self.layer.name(),description="Default style for {}".format(self.layer.name()), 
        useAsDefault=True, uiFileContent="")     


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = load_pointDialog()
            self.dlg.tabWidget.setCurrentIndex(0)
            self.dlg.pushButton_2.clicked.connect(self.select_input_file)
            self.dlg.pushButton.clicked.connect(self.import_database)
            self.dlg.pushButton_3.clicked.connect(self.show_layer)
            self.dlg.pushButton_4.clicked.connect(self.show_select_features)
            self.dlg.pushButton_5.clicked.connect(self.select_input_style)
            self.dlg.pushButton_6.clicked.connect(self.load_style)


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        
        
